
commands:
    01_install_supervisor:
        command: "sudo amazon-linux-extras install epel -y
                 && sudo yum install -y supervisor
                 && sudo mkdir /var/www/html/storage"
 
    02_edit_configuration:
        command: "sudo touch /etc/supervisord.d/laravel_worker.conf
                 && sudo touch /var/www/html/storage/worker.log
                 && sudo touch /etc/init.d/supervisord"

    03_launch_supervisor:
        command: "sudo supervisord -c /etc/supervisord.conf
                 && sudo supervisorctl update
                 && sudo chmod +x /etc/init.d/supervisord
                 && sudo chkconfig --add supervisord"

    04_automatic_start:
        command: "sudo service supervisord start"
    
    
        
files:
  "/etc/supervisord.d/laravel_worker.conf":
    mode: "000755"
    owner: root
    group: root
    content: |
       [program:laravel-worker]
       process_name=%(program_name)s_%(process_num)02d
       command=php /var/app/current/artisan queue:work sqs --sleep=3 --tries=3 --max-time=3600
       autostart=true
       autorestart=true
       stopasgroup=true
       killasgroup=true
       startsecs=0
       user=root
       numprocs=3
       redirect_stderr=true
       stdout_logfile=/var/www/html/storage/worker.log
       stopwaitsecs=3600
  

  "/etc/supervisord.conf":
    mode: "000755"
    owner: root
    group: root
    content: |
       [unix_http_server]
       file=/tmp/supervisor.sock   ; (the path to the socket file)

       [supervisord]
       logfile=/tmp/supervisord.log ; (main log file;default $CWD/supervisord.log)
       logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
       logfile_backups=10           ; (num of main logfile rotation backups;default 10)
       loglevel=info                ; (log level;default info; others: debug,warn,trace)
       pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
       nodaemon=false               ; (start in foreground if true;default false)
       minfds=1024                  ; (min. avail startup file descriptors;default 1024)
       minprocs=200                 ; (min. avail process descriptors;default 200)
       environment=SYMFONY_ENV=prod

       [rpcinterface:supervisor]
       supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

       [supervisorctl]
       serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

       [include]
       files =/etc/supervisord.d/*.conf

       [inet_http_server]
       port = 9000
       username = user
       password = 123

  
  "/etc/init.d/supervisord":
    mode: "000755"
    owner: root
    group: root
    content: |
       #! /bin/sh
       ### BEGIN INIT INFO
       # Provides:          supervisord
       # Required-Start:    $remote_fs
       # Required-Stop:     $remote_fs
       # Default-Start:     2 3 4 5
       # Default-Stop:      0 1 6
       # Short-Description: Example initscript
       # Description:       This file should be used to construct scripts to be
       #                       placed in /etc/init.d.
       ### END INIT INFO

       # Author: Dan MacKinlay <danielm@phm.gov.au>
       # Based on instructions by Bertrand Mathieu
       # http://zebert.blogspot.com/2009/05/installing-django-solr-varnish-and.html

       # Do NOT "set -e"

       # PATH should only include /usr/* if it runs after the mountnfs.sh script
       PATH=/sbin:/usr/sbin:/bin:/usr/bin
       DESC="Description of the service"
       NAME=supervisord
       DAEMON=/usr/local/bin/supervisord
       DAEMON_ARGS=""
       PIDFILE=/var/run/$NAME.pid
       SCRIPTNAME=/etc/init.d/$NAME

       # Exit if the package is not installed
       [ -x "$DAEMON" ] || exit 0

       # Read configuration variable file if it is present
       [ -r /etc/default/$NAME ] && . /etc/default/$NAME

       # Load the VERBOSE setting and other rcS variables
       . /lib/init/vars.sh

       # Define LSB log_* functions.
       # Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
       . /lib/lsb/init-functions

       #
       # Function that starts the daemon/service
       #
       do_start()
       {
           # Return
           #   0 if daemon has been started
           #   1 if daemon was already running
           #   2 if daemon could not be started
           start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
               || return 1
           start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
               $DAEMON_ARGS \
               || return 2
           # Add code here, if necessary, that waits for the process to be ready
           # to handle requests from services started subsequently which depend
           # on this one.  As a last resort, sleep for some time.
       }

       #
       # Function that stops the daemon/service
       #
       do_stop()
       {
           # Return
           #   0 if daemon has been stopped
           #   1 if daemon was already stopped
           #   2 if daemon could not be stopped
           #   other if a failure occurred
           start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
           RETVAL="$?"
           [ "$RETVAL" = 2 ] && return 2
           # Wait for children to finish too if this is a daemon that forks
           # and if the daemon is only ever run from this initscript.
           # If the above conditions are not satisfied then add some other code
           # that waits for the process to drop all resources that could be
           # needed by services started subsequently.  A last resort is to
           # sleep for some time.
           start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
           [ "$?" = 2 ] && return 2
           # Many daemons don't delete their pidfiles when they exit.
           rm -f $PIDFILE
           return "$RETVAL"
       }

       #
       # Function that sends a SIGHUP to the daemon/service
       #
       do_reload() {
           #
           # If the daemon can reload its configuration without
           # restarting (for example, when it is sent a SIGHUP),
           # then implement that here.
           #
           start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
           return 0
       }

       case "$1" in
         start)
           [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
           do_start
           case "$?" in
               0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
               2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
           esac
           ;;
         stop)
           [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
           do_stop
           case "$?" in
               0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
               2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
           esac
           ;;
           #reload|force-reload)
           #
           # If do_reload() is not implemented then leave this commented out
           # and leave 'force-reload' as an alias for 'restart'.
           #
           #log_daemon_msg "Reloading $DESC" "$NAME"
           #do_reload
           #log_end_msg $?
           #;;
         restart|force-reload)
           #
           # If the "reload" option is implemented then remove the
           # 'force-reload' alias
           #
           log_daemon_msg "Restarting $DESC" "$NAME"
           do_stop
           case "$?" in
             0|1)
               do_start
               case "$?" in
                   0) log_end_msg 0 ;;
                   1) log_end_msg 1 ;; # Old process is still running
                   *) log_end_msg 1 ;; # Failed to start
               esac
               ;;
             *)
               # Failed to stop
               log_end_msg 1
               ;;
           esac
           ;;
         *)
           #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
           echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
           exit 3
           ;;
       esac

    

